import { google } from 'googleapis';
import http from 'http';
import url from 'url';
import { TokenManager } from './TokenManager.js';
import { IAuthenticationService } from '../../interfaces/IAuthenticationService.js';

/**
 * Servi√ßo respons√°vel pela autentica√ß√£o OAuth
 * Princ√≠pio da Responsabilidade √önica (SRP)
 * Implementa IAuthenticationService
 */
export class AuthenticationService extends IAuthenticationService {
  constructor(credentials, tokenManager = null) {
    super();
    this.credentials = credentials;
    this.tokenManager = tokenManager || new TokenManager();
    this.auth = null;
  }

  /**
   * Inicializa o servi√ßo de autentica√ß√£o
   */
  initialize() {
    if (!this.credentials) {
      throw new Error('Credenciais n√£o fornecidas para AuthenticationService');
    }

    this.auth = new google.auth.OAuth2(
      this.credentials.client_id,
      this.credentials.client_secret,
      this.credentials.redirect_uri
    );

    console.log('‚úÖ AuthenticationService inicializado');
  }

  /**
   * Carrega tokens salvos e define nas credenciais
   * @returns {Object|null} Tokens carregados ou null
   */
  loadSavedTokens() {
    const tokens = this.tokenManager.loadTokens();
    if (tokens && this.auth) {
      this.auth.setCredentials(tokens);
    }
    return tokens;
  }

  /**
   * Salva tokens atuais
   * @param {Object} tokens - Tokens para salvar
   * @returns {boolean} True se salvou com sucesso
   */
  saveTokens(tokens) {
    return this.tokenManager.saveTokens(tokens);
  }

  /**
   * Verifica se est√° autenticado
   * @returns {boolean} True se autenticado
   */
  isAuthenticated() {
    if (!this.auth) return false;
    
    const tokens = this.auth.credentials;
    if (!tokens || !tokens.access_token) return false;
    
    return this.tokenManager.isTokenValid(tokens);
  }

  /**
   * Renova o token de acesso
   * @returns {Promise<Object>} Novos tokens
   */
  async refreshToken() {
    if (!this.auth) {
      throw new Error('AuthenticationService n√£o inicializado');
    }

    try {
      const tokens = this.auth.credentials;
      if (!tokens.refresh_token) {
        throw new Error('Refresh token n√£o dispon√≠vel');
      }

      console.log('üîÑ Renovando token...');
      const { credentials: newTokens } = await this.auth.refreshAccessToken();
      this.auth.setCredentials(newTokens);
      this.saveTokens(newTokens);
      console.log('‚úÖ Token renovado!');
      return newTokens;
    } catch (error) {
      console.error('‚ùå Erro ao renovar token:', error.message);
      throw error;
    }
  }

  /**
   * Garante que h√° um token v√°lido
   * @returns {Promise<boolean>} True se tem token v√°lido
   */
  async ensureValidToken() {
    if (!this.isAuthenticated()) {
      try {
        console.log('‚ö†Ô∏è Token expirado, renovando...');
        await this.refreshToken();
        return true;
      } catch (error) {
        console.error('‚ùå N√£o foi poss√≠vel renovar token');
        return false;
      }
    }
    
    console.log('‚úÖ Token v√°lido');
    return true;
  }

  /**
   * Inicia o processo de autentica√ß√£o OAuth
   * @returns {Promise<Object>} Tokens de autentica√ß√£o
   */
  async authenticate() {
    if (!this.auth) {
      throw new Error('AuthenticationService n√£o inicializado');
    }

    try {
      console.log('üîê Iniciando autentica√ß√£o OAuth...');
      
      // Gerar URL de autoriza√ß√£o
      const scopes = [
        'https://www.googleapis.com/auth/calendar',
        'https://www.googleapis.com/auth/calendar.events'
      ];

      const authUrl = this.auth.generateAuthUrl({
        access_type: 'offline',
        scope: scopes,
        prompt: 'consent'
      });

      console.log('üìã Abra esta URL no navegador:');
      console.log(authUrl);
      console.log('\n‚è≥ Aguardando autoriza√ß√£o...');

      // Iniciar servidor para callback
      const authCode = await this.startCallbackServer();
      
      // Trocar c√≥digo por token
      const { tokens } = await this.auth.getToken(authCode);
      this.auth.setCredentials(tokens);
      this.saveTokens(tokens);
      
      console.log('‚úÖ Autentica√ß√£o conclu√≠da!');
      return tokens;
    } catch (error) {
      console.error('‚ùå Erro na autentica√ß√£o:', error.message);
      throw error;
    }
  }

  /**
   * Inicia servidor HTTP para receber callback OAuth
   * @returns {Promise<string>} C√≥digo de autoriza√ß√£o
   */
  startCallbackServer() {
    return new Promise((resolve, reject) => {
      const port = new URL(this.credentials.redirect_uri).port || 3000;
      
      const server = http.createServer((req, res) => {
        const parsedUrl = url.parse(req.url, true);
        
        if (parsedUrl.pathname === '/callback') {
          const { code } = parsedUrl.query;
          
          if (code) {
            res.writeHead(200, { 'Content-Type': 'text/html' });
            res.end(`
              <html><body>
                <h1>‚úÖ Autentica√ß√£o Conclu√≠da!</h1>
                <p>Voc√™ pode fechar esta janela.</p>
                <script>setTimeout(() => window.close(), 2000);</script>
              </body></html>
            `);
            
            setTimeout(() => {
              server.close();
              resolve(code);
            }, 1000);
          } else {
            res.writeHead(400, { 'Content-Type': 'text/html' });
            res.end('<h1>‚ùå Erro: C√≥digo n√£o recebido</h1>');
            reject(new Error('C√≥digo n√£o recebido'));
          }
        } else {
          res.writeHead(404, { 'Content-Type': 'text/html' });
          res.end('<h1>‚ùå P√°gina n√£o encontrada</h1>');
        }
      });

      server.listen(port, () => {
        console.log(`üåê Servidor iniciado na porta ${port}`);
      });

      server.on('error', reject);
    });
  }

  /**
   * Retorna a inst√¢ncia de autentica√ß√£o do Google
   * @returns {Object} Inst√¢ncia de autentica√ß√£o
   */
  getAuthInstance() {
    return this.auth;
  }
}
